/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, QueryMsg, String, Uint8, Uint128, Timestamp, Uint64, RoundDataResponse } from "./PriceFeed.types";
export interface PriceFeedReadOnlyInterface {
  contractAddress: string;
  lastestRoundData: () => Promise<RoundDataResponse>;
  roundData: ({
    roundId
  }: {
    roundId: number;
  }) => Promise<RoundDataResponse>;
  decimals: () => Promise<Uint8>;
  description: () => Promise<String>;
  controller: () => Promise<String>;
}
export class PriceFeedQueryClient implements PriceFeedReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.lastestRoundData = this.lastestRoundData.bind(this);
    this.roundData = this.roundData.bind(this);
    this.decimals = this.decimals.bind(this);
    this.description = this.description.bind(this);
    this.controller = this.controller.bind(this);
  }

  lastestRoundData = async (): Promise<RoundDataResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      lastest_round_data: {}
    });
  };
  roundData = async ({
    roundId
  }: {
    roundId: number;
  }): Promise<RoundDataResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      round_data: {
        round_id: roundId
      }
    });
  };
  decimals = async (): Promise<Uint8> => {
    return this.client.queryContractSmart(this.contractAddress, {
      decimals: {}
    });
  };
  description = async (): Promise<String> => {
    return this.client.queryContractSmart(this.contractAddress, {
      description: {}
    });
  };
  controller = async (): Promise<String> => {
    return this.client.queryContractSmart(this.contractAddress, {
      controller: {}
    });
  };
}
export interface PriceFeedInterface extends PriceFeedReadOnlyInterface {
  contractAddress: string;
  sender: string;
  updateController: ({
    controller
  }: {
    controller: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateRoundData: ({
    answer
  }: {
    answer: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class PriceFeedClient extends PriceFeedQueryClient implements PriceFeedInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateController = this.updateController.bind(this);
    this.updateRoundData = this.updateRoundData.bind(this);
  }

  updateController = async ({
    controller
  }: {
    controller: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_controller: {
        controller
      }
    }, fee, memo, _funds);
  };
  updateRoundData = async ({
    answer
  }: {
    answer: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_round_data: {
        answer
      }
    }, fee, memo, _funds);
  };
}