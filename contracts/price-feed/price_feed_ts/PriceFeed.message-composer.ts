/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { Coin } from "@cosmjs/amino";
import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { InstantiateMsg, ExecuteMsg, QueryMsg, String, Uint8, Uint128, Timestamp, Uint64, RoundDataResponse } from "./PriceFeed.types";
export interface PriceFeedMsg {
  contractAddress: string;
  sender: string;
  updateController: ({
    controller
  }: {
    controller: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateRoundData: ({
    answer
  }: {
    answer: number;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class PriceFeedMsgComposer implements PriceFeedMsg {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateController = this.updateController.bind(this);
    this.updateRoundData = this.updateRoundData.bind(this);
  }

  updateController = ({
    controller
  }: {
    controller: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_controller: {
            controller
          }
        })),
        funds: _funds
      })
    };
  };
  updateRoundData = ({
    answer
  }: {
    answer: number;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_round_data: {
            answer
          }
        })),
        funds: _funds
      })
    };
  };
}